package com.taw.gotothere;

import java.util.ArrayList;
import java.util.List;

import android.app.Activity;
import android.graphics.Color;

import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.MapFragment;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.LatLngBounds;
import com.google.android.gms.maps.model.Marker;
import com.google.android.gms.maps.model.MarkerOptions;
import com.google.android.gms.maps.model.Polyline;
import com.google.android.gms.maps.model.PolylineOptions;
import com.taw.gotothere.model.DirectionsLeg;
import com.taw.gotothere.model.DirectionsResult;
import com.taw.gotothere.model.DirectionsRoute.RouteBounds;
import com.taw.gotothere.model.DirectionsStep;

/**
 * Maps-related operations.
 * 
 * @author chris
 */
public class MapsHelper {

	// Maps objects
	
	/** Google Map object. */
	private GoogleMap map;
	/** Placed marker for the destination. */
	private Marker destinationMarker = null;
	/** Marker for the start point of the route. */
	private Marker originMarker = null;
	/** Current directions polyline. */
	private Polyline polyline;
	
	public MapsHelper(final Activity activity) {
        map = ((MapFragment) activity.getFragmentManager().findFragmentById(R.id.map)).getMap();
        map.setMyLocationEnabled(true);
	}
	
	public void updateDestinationMarkerText(String title, String snippet) {
		if (title != null) destinationMarker.setTitle(title);
		if (snippet != null) destinationMarker.setSnippet(snippet);

		destinationMarker.showInfoWindow();
	}
	
	/**
	 * Places an origin marker on the map.
	 * 
	 * @param latLng Location to place the marker
	 * @param title String to use as the marker title, or null
	 * @param snippet String to use as the marker snippet, or null
	 */
	public void placeOriginMarker(LatLng latLng, String title, String snippet) {
		if (originMarker != null) originMarker.remove();
		originMarker = placeMarker(latLng, title, snippet, BitmapDescriptorFactory.HUE_GREEN);
	}

	/**
	 * Places a destination marker on the map. We might want to display the InfoWindow
	 * of the marker after placement.
	 * 
	 * @param latLng Location to place the marker
	 * @param title String to use as the marker title, or null
	 * @param snippet String to use as the marker snippet, or null
	 */
	public void placeDestinationMarker(LatLng latLng, String title, String snippet, boolean showInfoWindow) {
		if (destinationMarker != null) destinationMarker.remove();
		destinationMarker = placeMarker(latLng, title, snippet, BitmapDescriptorFactory.HUE_RED);
		if (showInfoWindow) {
			destinationMarker.showInfoWindow();
		}
		
		map.moveCamera(CameraUpdateFactory.newLatLng(latLng));
	}

	/**
	 * Remove markers and polyline from the map.
	 */
	public void clearAll() {
		if (originMarker != null) { 
			originMarker.remove();
			originMarker = null;
			polyline.remove();
			polyline = null;
		}
		
		if (destinationMarker != null) {
			destinationMarker.remove();
			destinationMarker = null;
		}
	}
	
	/**
	 * Helper method to report if we are displaying a route.
	 * 
	 * @return true if we have a polyline, false otherwise
	 */
	public boolean displayingRoute() {
		return polyline != null ? true : false;
	}
	
// Private methods	
	
	/**
	 * Add a marker to the map at the supplied position.
	 * 
	 * @param position
	 * @param title
	 * @param snippet
	 * @return Marker instance generated by the map
	 */
	private Marker placeMarker(LatLng position, String title, String snippet, float colour) {
		MarkerOptions opts = new MarkerOptions().
				position(position).
				title(title).
				snippet(snippet).
				icon(BitmapDescriptorFactory.defaultMarker(colour));
		
		return map.addMarker(opts);
	}
	
    /**
     * Process DirectionsTask results by generating route display - 
     * a polyline of the route, plus a start marker on the map. Destination
     * marker has already been placed by the user, so we just add some
     * details to it.
     */
	public void showDirections(DirectionsResult directions) {
		
		DirectionsLeg firstLeg = directions.routes.get(0).legs.get(0);
		
		// Add extra detail to the destination marker
		//destinationMarker.setTitle(firstLeg.endAddress);
		destinationMarker.setSnippet(firstLeg.distance.text);
		// Snap user-placed marker to end location defined in direction results
		destinationMarker.setPosition(firstLeg.endLocation.toLatLng());
		
		// Create the origin marker
		placeOriginMarker(firstLeg.startLocation.toLatLng(), firstLeg.startAddress, null);
			
		// Loop through results and display polyline
		PolylineOptions polyOpts = new PolylineOptions().
				width(10).
				color(Color.GREEN);
		for (DirectionsLeg leg : directions.routes.get(0).legs) {
			for (DirectionsStep step : leg.steps) {
				List<LatLng> points = decodePolyline(step.polyline.points);
				for (LatLng l : points) {
					polyOpts.add(l);
				}
			}
		}
		if (polyline != null) polyline.remove();
		polyline = map.addPolyline(polyOpts);
		
		// Finally, pan the map to encompass the route lat/lng bounds
		RouteBounds routeBounds = directions.routes.get(0).bounds;
		LatLngBounds bounds = new LatLngBounds(routeBounds.sw.toLatLng(), routeBounds.ne.toLatLng());
    	map.moveCamera(CameraUpdateFactory.newLatLngBounds(bounds, 100));
	}
	
	/**
	 * The Directions API returns a start & end point for the leg, but
	 * this would just yield a straight line on the map, which only approximately
	 * follows roads, so we use the polyline associated with each step instead. 
	 * This is encoded as per Google's Polyline encoding algorithm. The decoder 
	 * below is taken (with much relief) from:
	 * 
	 * http://jeffreysambells.com/posts/2010/05/27/decoding-polylines-from-google-maps-direction-api-with-java/
	 * 
	 * @return points a List of LatLngs for the polyline of this step
	 */
	private List<LatLng> decodePolyline(String polyline) {

	    List<LatLng> points = new ArrayList<LatLng>();
	    int index = 0, len = polyline.length();
	    int lat = 0, lng = 0;

	    while (index < len) {
	        int b, shift = 0, result = 0;
	        do {
	            b = polyline.charAt(index++) - 63;
	            result |= (b & 0x1f) << shift;
	            shift += 5;
	        } while (b >= 0x20);
	        int dlat = ((result & 1) != 0 ? ~(result >> 1) : (result >> 1));
	        lat += dlat;

	        shift = 0;
	        result = 0;
	        do {
	            b = polyline.charAt(index++) - 63;
	            result |= (b & 0x1f) << shift;
	            shift += 5;
	        } while (b >= 0x20);
	        int dlng = ((result & 1) != 0 ? ~(result >> 1) : (result >> 1));
	        lng += dlng;

	        LatLng latLng = new LatLng(lat / 1E5, lng / 1E5);
	        points.add(latLng);
	    }

	    return points;
	}
	
	// Accessors

	/**
	 * @return the map
	 */
	public GoogleMap getMap() {
		return map;
	}	
	
	/**
	 * @return the destinationMarker
	 */
	public Marker getDestinationMarker() {
		return destinationMarker;
	}

	/**
	 * @return the originMarker
	 */
	public Marker getOriginMarker() {
		return originMarker;
	}	
}
